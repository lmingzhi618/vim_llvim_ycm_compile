" All system-wide defaults are set in $VIMRUNTIME/debian.vim and sourced by
" the call to :runtime you can find below.  If you wish to change any of those
" settings, you should do it in this file (/etc/vim/vimrc), since debian.vim
" will be overwritten everytime an upgrade of the vim packages is performed.
" It is recommended to make changes after sourcing debian.vim since it alters
" the value of the 'compatible' option.

" This line should not be removed as it ensures that various options are
" properly set to work with the Vim-related packages available in Debian.
"runtime! debian.vim

" Uncomment the next line to make Vim more Vi-compatible
" NOTE: debian.vim sets 'nocompatible'.  Setting 'compatible' changes numerous
" options, so any other options should be set AFTER setting 'compatible'.
"set compatible

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
if has("syntax")
  syntax on
endif

" If using a dark background within the editing area and syntax highlighting
" turn on this option as well
"set background=dark

" Uncomment the following to have Vim jump to the last position when
" reopening a file
"if has("autocmd")
"  au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif
"endif

" Uncomment the following to have Vim load indentation rules and plugins
" according to the detected filetype.
"if has("autocmd")
"  filetype plugin indent on
"endif

" The following are commented out as they cause vim to behave a lot
" differently from regular Vi. They are highly recommended though.
"set showcmd		" Show (partial) command in status line.
"set showmatch		" Show matching brackets.
"set ignorecase		" Do case insensitive matching
"set smartcase		" Do smart case matching
"set incsearch		" Incremental search
"set autowrite		" Automatically save before commands like :next and :make
"set hidden		" Hide buffers when they are abandoned
"set mouse=a		" Enable mouse usage (all modes)

augroup filetype
    autocmd! BufRead,BufNewFile BUILD set filetype=blade
augroup end
au BufRead,BufNewFile *.go set filetype=go


" 查看当前所在函数
fun! ShowFuncName()
  let lnum = line(".")
  let col = col(".")
  echohl ModeMsg
  echo getline(search("^[^ \t#/]\\{2}.*[^:]\s*$", 'bW'))
  echohl None
  call search("\\%" . lnum . "l" . "\\%" . col . "c")
endfun
map ff :call ShowFuncName() <CR>


" 自适应不同语言的智能缩进
filetype indent on
" 将制表符扩展为空格
set expandtab
" 设置编辑时制表符占用空格数
set tabstop=2
" 设置格式化时制表符占用空格数
set shiftwidth=2
" 让 vim 把连续数量的空格视为一个制表符
set softtabstop=2

set number
set relativenumber 

" 高亮显示当前行/列
set cursorline
hi cursorline   cterm=NONE ctermbg=Black ctermfg=NONE guibg=Black guifg=NONE  
nmap <F9> :set cursorline <CR> <ESC>
" 高亮显示搜索结果
set hlsearch " 高亮显示当前行/列 set cursorline

set showcmd         " 输入的命令显示出来，看的清楚些
let g:Powerline_colorscheme='solarized256'       " 状态栏带底色
let g:Powerline_symbols='unicode'               " 带小箭头,'fancy':带大箭头
set t_Co=256
set term=screen-256color

" 自适应不同语言的智能缩进

"禁止折行
set nowrap
set mouse=a

set nocompatible              " be improved, required
filetype on                  " required
 
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle
set rtp+=~/.vim/bundle/Vundle.vim
set rtp+=/opt/go-1.10.3/misc/vim
call vundle#begin()
  Plugin 'gmarik/Vundle.vim'
  Plugin 'fatih/vim-go'
  Plugin 'nsf/gocode'
  Plugin 'Blackrush/vim-gocode'
  Plugin 'ervandew/supertab'
  Plugin 'Lokaltog/vim-powerline'
  Plugin 'octol/vim-cpp-enhanced-highlight'
  Plugin 'scrooloose/nerdtree'
  Plugin 'dgryski/vim-godef'
  Plugin 'majutsushi/tagbar'
" Plugin 'Valloric/YouCompleteMe'
  Plugin 'YouCompleteMe'

call vundle#end()

nmap <F7> :NERDTreeToggle<CR>
nnoremap <F8> :TagbarToggle<CR> 

" 设置 tagbar 子窗口的位置出现在主编辑区的左边 
let tagbar_right=1 
" 设置显示／隐藏标签列表子窗口的快捷键。速记：identifier list by tag
nnoremap <F8> :TagbarToggle<CR> 
" 设置标签子窗口的宽度 
let tagbar_width=32 
" tagbar 子窗口中不显示冗余帮助信息 
let g:tagbar_compact=1


let mapleader=";"
let maplocalleader=";"
" for golang 
nmap <leader>rg :! go run %<cr>
nmap <leader>bg :! go build %<cr>
nmap <leader>tg :! go test %<cr>

filetype plugin indent on    " required
filetype plugin on


" 按//选中光标所在位置变量
noremap ,, viwy/\<<C-R>"\><CR><C-O>
noremap // viwy/<C-R>"<CR><C-O>
noremap ;; vey/<C-R>"<CR><C-O>
noremap .. /<C-V><C-M><CR><C-O>
map <SPACE> viw

set backspace=indent,eol,start

let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_disable_autoinstall = 0
"let g:gofmt_command = goimports

let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
\ }


set background=dark
" 总是显示状态栏
set laststatus=2
" 显示光标当前位置
set ruler
set showcmd         " 输入的命令显示出来，看的清楚些
"禁止折行
set nowrap
let g:godef_split=4 "1: 打开新窗口时上下split 3:打开新窗口的时候左右split 4：在原窗口打开
let g:godef_same_file_in_same_window=1 "函数在同一个文件中时不需要打开新窗口


syntax enable
syntax on

" 使用gometalinter 检查go语法规范性
"let g:syntastic_go_checkers = ['gometalinter']
"nmap <F6> :GoMetaLinter <cr>

"－－－－－－－－－－－－－－－－－ YCM CONFIG BEGIN －－－－－－－－－－－－－－－－－

set completeopt=longest,menu "让Vim的补全菜单行为与一般IDE一致(参考VimTip1228)

autocmd InsertLeave * if pumvisible() == 0|pclose|endif "离开插入模式后自动关闭预览窗口

inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<CR>"    "回车即选中当前项 

let g:ycm_show_diagnostics_ui = 0 "关闭语法提示

let g:ycm_global_ycm_extra_conf = '~/.ycm_extra_conf.py'

let g:ycm_confirm_extra_conf=0 "关闭加载.ycm_extra_conf.py提示

let g:ycm_autoclose_preview_window_after_completion=1

let g:ycm_collect_identifiers_from_tags_files=1 " 开启 YCM 基于标签引擎

let g:ycm_min_num_of_chars_for_completion=1 " 从第2个键入字符就开始罗列匹配项

let g:ycm_cache_omnifunc=0 " 禁止缓存匹配项,每次都重新生成匹配项

let g:ycm_seed_identifiers_with_syntax=1 " 语法关键字补全

" force recomile with syntastic

nnoremap <F10> :YcmForceCompileAndDiagnostics <CR>

let g:ycm_complete_in_comments = 1 "在注释输入中也能补全

let g:ycm_complete_in_strings = 1"在字符串输入中也能补全

let g:ycm_collect_identifiers_from_comments_and_strings = 1 "注释和字符串中的文字也会被收入补全

let g:clang_user_options='|| exit 0'

let g:ycm_keep_logfiles = 1

let g:ycm_log_level = 'debug'

"同时，YCM可以打开location-list来显示警告和错误的信息:YcmDiags

let g:ycm_error_symbol = '✗'

let g:ycm_warning_symbol = '⚠'

nmap <F6> :YcmDiags

set tags+=/usr/include/c++/4.8.5/stdcpp.tags

let OmniCpp_DefaultNamespaces = ["_GLIBCXX_STD"]

 " 按 F3键 跳转到定义处
nnoremap <F3> :YcmCompleter GoToDefinitionElseDeclaration <CR>
nnoremap ;gg :YcmCompleter GoToDefinitionElseDeclaration <CR>

"－－－－－－－－－－－－－－－－－ YCM CONFIG END  －－－－－－－－－－－－－－－－－



